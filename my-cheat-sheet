#vim /\v^# \ze\w/ % | cw
##############################################################################
# CURSOR MOVEMENTS
##############################################################################
:h motion.txt       A complete reference for motions
w、W                Forward to start of next word(no punctuation)
b、B                Backward to start of current/previous word(no punctuation)
ea                  Append at the end of the current word.
gea                 Append at the end of the previous word.
0                   To first character of real line
^                   To first nonblank character of real line
$                   To end of real line
%                   Jump to matching parenthesis   #:h % matchpairs matchit
-                   move line upwards, on the first non blank character
+                   move line downwards, on the first non blank character
<enter>             move line downwards, on the first non blank character
( / )               Jump to start of previous/next sentence
{ / }               Jump to start of previous/next paragraph
]]                  Jump a section forward or to the next '{' in the first column.
[[                  Jump a section backward or the previous '{' in the first column.
gg                  go to first line
G                   go to last line
[count]G            Jump to line number
:n                  Jump to line number
<C-f>               move the cursor forward by a screen of text
<C-b>               move the cursor backward by a screen of text
<C-u>               move the cursor up by half a screen
<C-d>               move the cursor down by half a screen
H / M / L           Jump to top/middle/bottom of screen
gd                  Jump to declaration
gf                  Jump to file name under the cursor
<C-]>               Jump to definition of keyword under the cursor

Jump List
------------------------------------------------------------------------------
:jumps              inspect the contents of the jump list

Each separate window has its own jump list.

<C-o>               Jump to previous position you were at
<C-i>               Jump to more recent position you were at
``                  Position before the last jump within current file #只会改变最近一次的跳转记录

The <C-o> and <C-i> commands themselves are never treated as a motion.
This means that we can’t use them to extend the reach of a Visual mode
selection, nor can we use them in Operator-Pending mode.

Change List
------------------------------------------------------------------------------
:changes
g;                  Go to older position in change list.
g,                  Go to newer position in change list.
`.                  Go to newest position in change list.

gi                  Go to location of last insertion and enter insert mode, equal to "`^a".
`^                  Location of last insertion


Find
------------------------------------------------------------------------------
f{char}             Forward to the next occurrence of {char}
F{char}             Backward to the previous occurrence of {char}
t{char}             Forward to the character before the next occurrence of {char}
T{char}             Backward to the character after the previous occurrence of {char}
;                   Repeat the last character-search command
\                   Reverse the last character-search command
/pattern<CR>        Jump to next/previous occurrence of pattern
?pattern<CR>        Jump to next/previous occurrence of pattern
:[n]match [color] [keyword] 高亮字符串
:hi                         查看[color]的选择

use f and F in Normal mode, and t and T in Operator-Pending mode:
dt.
The search command is an exclusive motion:
d/{string}<CR>

Text Objects
------------------------------------------------------------------------------
a) or ab       A pair of (parentheses)
i) or ib       Inside of (parentheses)
a} or aB       A pair of {braces}
i} or iB       Inside of {braces}
a]             A pair of [brackets]
i]             Inside of [brackets]
a>             A pair of <angle brackets>
i>             Inside of <angle brackets>
a’             A pair of 'single quotes'
i’             Inside of 'single quotes'
a"             A pair of "double quotes"
i"             Inside of "double quotes"
a`             A pair of `backticks`
i`             Inside of `backticks`
at             A pair of <xml>tags</xml>
it             Inside of <xml>tags</xml>
iw             Current word
aw             Current word plus one space
iW             Current WORD
aW             Current WORD plus one space
is             Current sentence
as             Current sentence plus one space
ip             Current paragraph
ap             Current paragraph plus one blank line

As a general rule, we could say that the d{motion} command tends to work
well with aw , as , and ap , whereas the c{motion} command works better with
iw and similar.

MARKS
------------------------------------------------------------------------------
:marks         list all the current marks
mm             make a bookmark named m at the current cursor position
'm             go to the line with bookmark m
`m             go to position of bookmark m
`[             Start of last change or yank
`]             End of last change or yank
`<             Start of last visual selection
`>             End of last visual selection`
mM             Set a global mark

Try to get into a habit of setting a global mark before using any commands
that interact with the quickfix list, such as :grep , :vimgrep , and :make . The same
goes for the commands that interact with the buffer and argument lists, such
as :args {arglist} and :argdo.


##############################################################################
# INSERT MODE
##############################################################################
i                    start insert mode at cursor
I                    insert at the beginning of the line
a                    append after the cursor
A                    append at the end of the line
o                    open (append) blank line below current line
O                    open blank line above current line
r                    replace a single character
R                    enter Replace mode
gR                   enter Virtual Replace mode, Consider the tab character.
cc                   change (replace) an entire line
cw                   change (replace) to the end of word
C                    change (replace) to the end of line
s                    delete character at cursor and substitute text, equal to "cl"
S                    delete line at cursor and substitute text (same as cc)
<Esc>                Switch to Normal mode
<C-[>                Switch to Normal mode]
<C-o>                Switch to Insert Normal mode     #<c-o>zz zt zb
<C-o>h               move cusor left
<C-o>l               move cusor right
<C-o>0               move cusor head
<C-o>A               move cusor end
<C-o>zz              move cusor in the middle of window
<C-h>                Delete back one character (backspace)
<C-w>                Delete back one word
<C-u>                Delete back to start of line
<C-v>065             Insert 'A'.
<C-v><Tab>           Always insert a tab character literally.
<C-k>,_              Insert Unusual Characters(IDEOGRAPHIC COMMA).  #h digraph-table


##############################################################################
# COMMAND-LINE MODE
##############################################################################
:h ex-cmd-index             View the full Ex command list
:h cmdline-special          View the special symbol, for example %.
:h filename-modifiers       View a set of filename modifiers.
:[range]t {address}         Duplicate lines(copy TO)
:[range]m {address}         Move Lines
:[range]normal {commands}   Execute Normal mode commands {commands}.
<C-r><C-w>                  Insert the current word at the command prompt.
<C-r><C-a>                  Insert the current WORD at the command prompt.
<C-p>、<C-n>                Recall commands from history
q/                          Open the command-line window with history of searches
q:                          Open the command-line window with history of Ex commands
<C-f>                       Switch from Command-Line mode to the command-line window
<C-c>                       Switch from command-line window to the Command-Line mode
<C-b>、<C-e>                Move Cursor to the start/end of the commind line

REPEAT AND UNDO
-------------------
@:                          Repeat the last Ex command.
@@                          Use it to repeat after running @: for the first time.
:[range]normal .            Execute the Normal mode . command for [range]
:[range]normal @q           Exceute more complicated repeat task.
<C-o>、u                    Undo

RUN COMMANDS IN THE SHELL
-------------------------
:shell                      Start a shell (return to Vim by typing exit )
:!{cmd}                     Execute {cmd} with the shell
:read!{cmd}                 Execute {cmd} in the shell and insert its standard output below the cursor
:[range]write !{cmd}        Execute {cmd} in the shell with [range] lines as standard input
:[range]!{filter}           Filter the specified [range] through external program {filter}
!{motion}                   A convenient shortcut for setting the range of a :[range]!{filter} command 
:2,$!sort -t',' -k2         Filter [2,last] lines through sort command
!G                          equal to :.,$!


[RANGE]
The syntax for defining a range is very flexible. We can mix and match line
numbers, marks, and patterns, and we can apply an offset to any of them.
--------------------
1                   First line of the file
$                   Last line of the file
0                   Virtual line above first line of the file
.                   Line where the cursor is placed
'm                  Line containing mark m
'<                  Start of visual selection
'>                  End of visual selection
%                   The entire file (shorthand for :1,$ )'

example:
:6t.                        Copy line 6 to just below the current line
:t6                         Copy the current line to just below line 6
:t.                         Duplicate the current line (similar to Normal mode yyp )
:t$                         Copy the current line to the end of the file
:'<,'>t0                    Copy the visually selected lines to the start of the file
:/<html>/,/<\/html>/p
:/<html>/+1,/<\/html>/-1p
:%normal A;
:%normal i//

TAB-COMPLETE
------------------
<Tab> , <C-n> , or <Right>  Scroll forward
<S-Tab> , <C-p> , or <Left> Scroll backward


##############################################################################
# COPY AND PASTE
##############################################################################
x                         delete current character
X                         delete previous character
D                         delete from cursor to end of line
xp                        Transpose the next two characters.
ddp                       Transpose the order of this line and its successor.
ddkp                      swap current line with previous
yyp                       Duplicating lines
<C-r>{register}           Paste register from Insert mode.    #<C-r>0
<C-r><C-p>{register}      Paste register from Insert mode in paste mode.
<C-r>=                    Do arithmetic in Insert mode.
p                         put the text from register " after the cursor
P                         put the text from register " before the cursor
gp                        just like "p", but leave the cursor just after the new text
gP                        just like "P", but leave the cursor just after the new text
:set paste                avoid unexpected effects in pasting

The p and P commands are great for pasting multiline regions of text. But
for short sections of character-wise text, the <C-r>{register} mapping can be
more intuitive.

SWAP TWO WORDS
------------------------------------------------------------------------------
change "chips and fish" to "fish and chips"
de
mm
ww
vep
`m
P


REGISTERS
------------------------------------------------------------------------------
:registers          display the contents of all registers
""                  The unnamed register
"0                  The yank register
"_                  The black hole register
"+                  The X11 clipboard, used with cut, copy, and paste
"*                  The X11 primary, used with middle mouse button
"%                  Name of the current file
"#                  Name of the alternate file
".                  Last inserted text
":                  Last Ex command
"/                  Last search pattern
"a – "z             The named registers
"=                  The expression register



##############################################################################
# EDITING
##############################################################################
J                   join line below to the current one
u                   undo
<C-r>               redo
.                   repeat last command
~                   switch case
g~iw                switch case of current word
gUiw                make current word uppercase
guiw                make current word lowercase
gU$                 make uppercase until end of line
gu$                 make lowercase until end of line
>>                  indent line one column to right
<<                  indent line one column to left
==                  auto-indent current line
:%retab             fix spaces / tabs issues in whole file
:r [name]           insert the file [name] below the cursor.
:r !{cmd}           execute {cmd} and insert its standard output below the cursor.
<C-a>               add [count] to the number at or after the cursor
<C-x>               subtract [count] to the number at or after the cursor




##############################################################################
# MACROS
##############################################################################
qa                  start recording macro 'a'
qA                  Append commands to macro 'a'
q                   end recording macro
:reg a              Inspect the contents of register a
@a                  Replay macro 'a'
@@                  Replay the same macro
qq;.q               Overcome The Dot Formula can't be executed with a count.(22@q)
3@a                 Execute macro in series
:'<,'>normal @a     Execute macro in parallel

Act upon a collection of files in parallel
------------------------------------------------------------------------------
:first
#......  record marcro 'a'
:edit!
:argdo normal @a
:argdo write


Act upon a collection of files in series
------------------------------------------------------------------------------
:first
#......  record marcro 'a'
qA
:wnext
:q
22@

Edit the Contents of a Macro
------------------------------------------------------------------------------
G
:put a
#......  edit
0"ay$
dd


##############################################################################
# VISUAL MODE
##############################################################################
v                   Switch character-wise Visual mode
V                   Switch line-wise Visual mode
<C-v>               Switch block-wise Visual mode
gv                  Reselect the last visual selection
<Esc>               Switch to Normal mode
<C-g>               Switch to Select mode #:h Select-mode
o                   Go to other end of highlighted text
O                   move to other corner of block

aw                  mark a word
ab                  a () block (with braces)
ab                  a {} block (with brackets)
ib                  inner () block
ib                  inner {} block
it                  inside the tag

VISUAL MODE COMMANDS
--------------------

>                   shift right
<                   shift left
c                   change (replace) marked text
y                   yank (copy) marked text
d                   delete marked text
~                   switch case
U                   upper case of marked area


##############################################################################
# EXITING
##############################################################################
:q                  quit Vim. This fails when changes have been made.
:q!                 quit without writing.
:cq                 quit always, without writing.
:wq                 write the current file and exit.
:wq!                write the current file and exit always.
:x                  write and quit (similar to :wq, but only write if there are changes)
:wq {file}          write to {file}. Exit if not editing the last
:wq! {file}         write to {file} and exit always.
:[range]wq[!]       same as above, but only write the lines in [range].
ZZ                  write current file, if modified, and exit.
ZQ                  quit current file and exit (same as ":q!").




##############################################################################
# MULTIPLE FILES
##############################################################################
:w[rite]       Write the contents of the buffer to disk
:e[dit]!       Read the file from disk back into the buffer (that is, revert changes)
:qa[ll]!       Close all windows, discarding changes without warning
:wa[ll]        Write all modified buffers to disk

BUFFERS
-----------------------------------------------------------
:ls                        list all buffers   ":h :ls
:bn                        go to next buffer
:bp                        go to previous buffer
:5,10bd                    Delete buffers numbered 5 through 10 inclusive
:lcd                       Like :cd, but only valid in the current window.
<C-^>                      :b#
N<C-^>                     :bN

ARGUMENT LIST
-----------------------------------------------------------
:args               Examine the argument list
:args {arglist}     Populate the argument list
:argdo              Execute the same command on each buffer in the set.
:first
:last
:previous
:next

The {arglist} can include filenames, wildcards, or even the output from a shell command.
Example:
:args index.html app.js
:args *.*
:args **/*.js **/*.css
:args `cat .chapters`

WINDOWS
-----------------------------------------------------------
:sp f               Split open f
:vsp f              Vsplit open f
<C-w>s              Split windows
<C-w>v              Split windows vertically
<C-w>w              Cycle between open windows
<C-w>h              Focus the window to the left
<C-w>j              Focus the window below
<C-w>k              Focus the window above
<C-w>l              Focus the window to the right
<C-w>q              Quit the active window
<C-w>c              Close the active window
<C-w>o              Keep only the active window
<C-w>x              swap windows
<C-w>+              increase window height
<C-w>-              decrease window height
<C-w><              increase window width
<C-w>>              decrease window width
<C-w>=              Equalize width and height of all windows
<C-w>_              Maximize height of the active window
<C-w>|              Maximize width of the active window


TABS
-----------------------------------------------------------
:tabe[dit] {filename}      Open {filename} in a new tab
<C-w>T                     Move the current window into its own tab
:tabc[lose]                Close the current tab page
:tabo[nly]                 Keep the active tab page, closing all others
{N}gt                      Switch to tab page number {N}
gt                         Switch to the next tab page
gT                         Switch to the previous tab page
:tabmove                   Move the current tab page to the end
:tabmove 0                 Move the current tab page to the beginning



##############################################################################
# Matching Patterns and Literals
##############################################################################
/\cfoo                     Cause the search pattern to ignore case
/foo\C                     Force case sensitivity
/\v<the>                   Stake the boundaries of a word, equal to /\<the\>
/\v"\zs[^"]+\ze"]          Stake the boundaries of a match

Use Parentheses to Capture Submatches
------------------------------------------------------------------------------
/\v<(\w+)\_s+\1>           Match duplicate words(\1 capture submatch)

Use Parentheses Without Capturing Their Contents
------------------------------------------------------------------------------
/\v(%(And|D)rew) (Neil)
:%s//\2, \1/g

Escape Characters Programmatically
------------------------------------------------------------------------------
/\V<C-r>=escape(@u,getcmdtype().'\')
equal to:
/\V<C-r>=escape(@u,'/\')


magic pattern               Vim’s regular expression syntax, closer in style to POSIX.
very magic pattern(:h \v)   Makes Vim’s regular expression engine behave much more like that of Perl, Python, or Ruby.
very nomagic pattern(:h \V) Makes Vim Verbatim Searches

Find Hex Colors
------------------------------------------------------------------------------
/#\([0-9a-fA-F]\{6}\|[0-9a-fA-F]\{3}\)
Using magic search, we have to escape ( , ) , | , and { characters to confer special meaning upon them.

/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})
The \v pattern switch enables very magic search, where all characters assume a special meaning,
with the exception of “ _ ”, uppercase and lowercase letters, and the digits 0
through 9 (see :h \v ).
In here, the ( , ) , | , and { characters assume special meaning, but the  # is an exception to the rule.

/\v#(\x{6}|\x{3})
We can compact the expression further by using the \x character class, which stands for [0-9A-Fa-f] .

/\Va.k.a.
Use of \V means that in the pattern after it, only the backslash(\) has a special meaning

Note: Vim interpreted the first / (or ?) character as a search field terminator.


##############################################################################
# SEARCH
##############################################################################
n                               Jump to next match, preserving direction and offset
N                               Jump to previous match, preserving direction and offset
/<CR>                           Jump forward to next match of same pattern
?<CR>                           Jump backward to previous match of same pattern
<C-r><C-w>                      Autocomplete the search field based on preview match
:%s///gn                        Count the matches for the current pattern
//e<CR>                         Repeats the last search but offset the cursor to the end of the match.
i/                              text Objects -- lastpat
*                               search forward, word under cursor
#                               search backward, word under cursor

replace ' with "
------------------------------------------------------------------------------
:%s/\v'(([^']|'\w)+)'/“\1”/g'
or
/\v'(([^']|'\w)+)'
:%s//“\1”/g
or
/\v'(([^']|'\w)+)'
:%s/<C-r>//“\1”/g


##############################################################################
# SUBSTITUTION
##############################################################################
:[range]s[ubstitute]/{pattern}/{string}/[flags]
:h sub-replace-specail          Special characters in the replacement field.
:h s_flags                      The flags that you can use for the substitute commands
:h s_c                          Confirm each substitution
:%s/old/new/g                   replace all old with new throughout file
:%s/old/new/gc                  replace all old with new throughout file with confirmation
:%s//\=@a/g                     replace register / with register a (better than :%/s/<C-r>a/g).
:&                              Synonym for `:s` (repeat last substitute).
:&&                             equal to :s//~/&
:%&&                            equal to g&
&                               equal to :s
g&                              equal to :%s//~/&

Rearrange CSV Fields Using Submatches
------------------------------------------------------------------------------
last name,first name,email
neil,drew,drew@vimcasts.org
doe,john,john@example.com

/\v^([^,]*),([^,]*),([^,]*)$
:%s//\3,\2,\1


Perform Arithmetic on the Replacement
------------------------------------------------------------------------------
<h2>Heading number 1</h2>
<h3>Number 2 heading</h3>
<h4>Another heading</h4>

/\v\<\/?h\zs\d
%s//\=submatch(0)-1/g

Swap Two or More Words
------------------------------------------------------------------------------
The dog bit the man.

/\v(<man>|<dog>)
:%s//\={"dog":"man","man":"dog"}[submatch(1)]/g

%S/{man,dog}/{dog,man}/g  "tpope/vim-abolish

Find and Replace Across Multiple Files
------------------------------------------------------------------------------
/Pragmatic\ze Vim
:%s//Practical/g
:args **/*.txt
argdo %s//Practical/ge

/Pragmatic\ze Vim
:vimgrep /<C-r>// **/*.txt
:Qargs              "nelstrom/vim-qargs
:argdo %s//Practical/g
:argdo update

:Qargs | argdo %s//Practical/g | update  ":h :bar



##############################################################################
# plugins > mileszs/ack.vim
##############################################################################
:Ack                Search recursively in directory


##############################################################################
# plugins > ctrlpvim/ctrlp.vim
##############################################################################
<C-p>               invoke CtrlP in find file mode
<leader>ff          invoke CtrlP in find file mode
<leader>fb          invoke CtrlP in find buffer mode
<leader>fm          invoke CtrlP in find MRU mode
<leader>fu          invoke CtrlP in find function mode

Once CtrlP is open:
Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
Press <c-f> and <c-b> to cycle between modes.
Press <c-d> to switch to filename only search instead of full path.
Press <c-r> to switch to regexp mode.
Use <c-j>, <c-k> or the arrow keys to navigate the result list.
Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
Use <c-y> to create a new file and its parent directories.
Use <c-z> to mark/unmark multiple files and <c-o> to open them.
Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.

Submit two or more dots .. to go up the directory tree by one or multiple levels.

##############################################################################
# PLUGINS > CHEAT
##############################################################################
:Cheat              open cheat sheet (with autocomplete)
<leader>ch          open cheat sheet for word under the cursor


##############################################################################
# PLUGINS > GIST
##############################################################################
:Gist               post whole text to gist
:Gist XXXXX         get gist XXXXX
:Gist -l            list my gists


##############################################################################
# PLUGINS > GUNDO
##############################################################################
:GundoToggle        show undo tree


##############################################################################
# PLUGINS > LUSTYJUGGLER
##############################################################################
<Leader>lj          show open buffers


##############################################################################
# PLUGINS > NERDCOMMENTER
##############################################################################
<leader>cc          comment out line(s)
<leader>c<space>    toggle the comment state of the selected line(s)


##############################################################################
# PLUGINS > NERDTREE
##############################################################################
:NERDTreeToggle     show / hide file browser
:NERDTreeFind       show current file in file browser
:Bookmark name      bookmark the current node as "name"

##############################################################################
# PLUGINS > PICKACOLOR
##############################################################################
:PickHEX            choose color in system color picker


##############################################################################
# PLUGINS > SNIPMATE
##############################################################################
<tab>               expand snippet


##############################################################################
# PLUGINS > SPARKUP
##############################################################################
CTRL-e              execute sparkup (zen coding expansion)
CTRL-n              jump to the next empty tag / attribute


##############################################################################
# PLUGINS > SURROUND
##############################################################################
cs'"                change surrounding quotes to double-quotes
cs(}                change surrounding parens to braces
cs({                change surrounding parens to braces with space
ds'                 delete surrounding quotes
dst                 delete surrounding tags
ysiw[               surround inner word with brackets with space
veeS'               surround 2 words (ee) with quotes '


##############################################################################
# PLUGINS > TABULAR
##############################################################################
:Tabularize /,      line the selected lines up on the commas


##############################################################################
# PLUGINS > TAGLIST
##############################################################################
:TlistToggle        open / close taglist window
<enter>             jump to tag or file
<space>             display the tag prototype


##############################################################################
# PLUGINS > UNIMPAIRED
##############################################################################
[space              new line above
]space              new line below
[e                  exchange line above
]e                  exchange line below
[x                  XML encode
]x                  XML decode (with htmlentities)
[q                  jump to previous quickfix item
]q                  jump to next quickfix item
[Q                  jump to first quickfix item
]Q                  jump to last quickfix item


##############################################################################
# PLUGINS > VIM-FUGITIVE
##############################################################################
:Git                run a git command
:Gstatus            git status : - to (un)stage , p to patch, C to commit
:Gcommit            git commit
:Gread              empty the buffer and revert to the last commit
:Gwrite             write the current file and stage the results
:Gmove              git mv
:Gremove            git rm
:Glog               git log
:Gdiff              perform a vimdiff against the current file of a certain revision
:Gblame             open blame information in a scroll bound vertical splitt
:Gbrowse            open github


##############################################################################
# PLUGINS > VIM-MARKDOWN-PREVIEW
##############################################################################
:Mm                 preview markdown document in webbrowser


##############################################################################
# PLUGINS > VIM-PEEPOPEN
##############################################################################
<Leader>p           open the current directory with the peepopen application (fuzzy search)


##############################################################################
# PLUGINS > VIM-SYMFONY
##############################################################################
:Sview              open template file
:Saction            open action file
:Smodel             open model file
:Sfilter            open filter file
:Sform              open form file
:Spartial           open partial file / write selected content in partial + include
:Scomponent         open component file / write selected content in component + include
:Salternate         open alternate model file (class - table class)
:Symfony            execute task


##############################################################################
# Global Commands
##############################################################################
:[range] global[!] /{pattern}/ [cmd]
:g/re/d                               Delete Matching Lines
:v/re/d                               Keep Only Matching Lines "vgloabl

Collect TODO Items in a Register
------------------------------------------------------------------------------
qaq
:g/TODO/yank A
:reg a

A generalized form of this :global command
------------------------------------------------------------------------------
:g/{start}/ .,{finish} [cmd]
For each range of lines beginning with {start} and ending with {finish}, run the specified [cmd].
:g/{/sil .+1,/}/-1 >


##############################################################################
# QUICKFIX WINDOW
##############################################################################
:make
:make!              The trailing ! character tells Vim to update the quickfix list without jumping to the first item.
:compiler           Activates a compiler plugin  ":args $VIMRUNTIME/compiler/*.vim
:cnext              Jump to next item
:cprev              Jump to previous item
:cfirst             Jump to first item
:clast              Jump to last item
:cc N               Jump to nth item
:copen              Open the quickfix window
:cclose             Close the quickfix window
:colder             Recall an older version of the quickfix list
:cnewer             Revert from an old quickfix list back to a newer one


##############################################################################
# Search Project-Wide with grep, vimgrep, and Others
##############################################################################
:grep -i Waldo *
:vim[grep][!] /{pattern}/[g][j] {file}    The {file} argument must not be blank.

Customize the grep Program
------------------------------------------------------------------------------
:set grepprg=ack\ --nogroup\ --column\ $*
:set grepformat=%f:%l:%c:%m

Search in File, Then Search in Project
------------------------------------------------------------------------------
/\v'(([^']|'\w)+)'
:vim /<C-r>// **


##############################################################################
# Autocompletion
##############################################################################
<C-n>             Generic keywords    ":set complete?
<C-x><C-n>        Current buffer keywords
<C-x><C-i>        Included file keywords
<C-x><C-]>        tags file keywords
<C-x><C-k>        Dictionary lookup        ":set spell  or  :h 'dictionary'
<C-x><C-l>        Whole line completion
<C-x><C-f>        Filename completion, always expands paths relative to the working directory
<C-x><C-o>        Omni-completion
:h compl-omni-filetypes    the omni-completion language plugins list
:h complete-functions      To figure out how to write omni-completion plugins

Commands for the Pop-Up Menu
------------------------------------------------------------------------------
<C-n>             Use the next match from the word list (next match)
<C-p>             Use the previous match from the word list (previous match)
<Down>            Select the next match from the word list
<Up>              Select the previous match from the word list
<C-y>             Accept the currently selected match (yes)
<C-e>             Revert to the originally typed text (exit from autocompletion)
<C-h> (and <BS>)  Delete one character from current match
<C-l>             Add one character from current match
{char}            Stop completion and insert {char}
<C-n><C-p>        Filter the word list in real time.


##############################################################################
# Spell Checker
##############################################################################
]s                Jump to next spelling error
[s                Jump to previous spelling error
z=                Suggest corrections for current word
zg                Add current word to spell file
zw                Remove current word from spell file
zug               Revert zg or zw command for current word
<C-x>s            Vim scans backward from the cursor position, stopping when it finds a misspelled word.

##############################################################################
# EXTERNEL > CTAGS
##############################################################################
:!ctags -R -f .tags ./
:h tags-option
<C-]>             equal to :tag {keyword}
g<C-]>            equal to :tjump {keyword}
:tag /{pattern}
:tjump /{pattern}
:pop or <C-t>     Reverse through tag history
:tag              Advance through tag history
:tnext            Jump to next matching tag
:tprev            Jump to previous matching tag
:tfirst           Jump to first matching tag
:tlast            Jump to last matching tag
:tselect          Prompt user to choose an item from the tag match list

<C-w>]            split window and jump to tag under cursor
<C-w>}            show tag under cursor in preview window


##############################################################################
# plugins > kana/vim-textobj-entire
##############################################################################
ae targets the entire content of the current buffer.
ie is similar to ae, but ie does not include leading and trailing empty lines.
For example, =ae means gg=G


##############################################################################
# plugins > kana/vim-textobj-entire
##############################################################################
:help commentary

FAQ: My favorite file type isn't supported!
A:   autocmd FileType apache setlocal commentstring=#\ %s


##############################################################################
# PERSONAL .VIMRC
##############################################################################
<leader>ev          edit vimrc file
<leader>sv          reload vimrc file
<leader>sh          show syntax highlighting groups for word under cursor

<space>             page down
jj                  exit insertion mode
<leader>q           close the current window

<leader>/           clear the search register

<leader>h           toggle hidden characters 

<leader>W           strip all trailing whitespace

CTRL-h              go to left window
CTRL-j              go to down window
CTRL-k              go to top window
CTRL-l              go to right window
<leader>w           open vertical split window and activate

%%                  will expand to current directory
<leader>ew          open file from current directory
<leader>es          open file in split window from current directory
<leader>cd          change directory to parent dir of current file
##                  will expand to webroot

:Wrap               wrap text
<F2>                toggle wrapped text

<F3>                toggle spell check

<F4>                toggle light/dark background

<F5>                underline with dashes
<F6>                underline with double lines

<leader><up>        bubble line(s) up
<leader><down>      bublle line(s) down

:Ltag               load tags file
:Project            cd to project and load tags file
<leader>t           show current tag for word under cursor
<leader>st          show current tag for word under cursor in split window
<leader>tj          show current tag list for word under cursor
<leader>stj         show current tag list for word under cursor in split window

CTRL-<space>        show omnicomplete menu

<leader>b           surround with strong tags
<leader>i           surround with em tags

CTRL-p              generate PHP DOC

<leader>a           run Ack

<leader>md          preview markdown

<leader>s           preview in safari

<leader>x           colorpicker

<leader>n           toggle Nerdtree
<leader>N           close Nerdtree
<leader>f           find current file in Nerdtree

<leader>l           toggle Taglist
<leader>L           close Taglist

<leader>ph          set filetype to php.html
<leader>r           reload all snipmate snippets

CTRL-<tab>          switch between buffers

CTRL-y              go to next tag of attribute in sparkup plugin

<leader>g           toggle Gundo window

IMG<CR>             show image browser to insert image tag with src, width and height
b                   insert image tag with dimensions from NERDTree 
                    (http://stackoverflow.com/questions/5707925/vim-image-placement)

##############################################################################
#Building Vim from source
##############################################################################

https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source
https://linux.cn/article-8094-1.html
http://blog.csdn.net/a464057216/article/details/52821171
make distclean 清理重新编译

##############################################################################
# 帮助信息
##############################################################################

:h tutor            入门文档
:h quickref         快速帮助
:h index            查询 Vim 所有键盘命令定义
:h tips             查询vim技巧
:verbose map <C-p>  查询<C-p>的映射
:h CTRL-H           查询普通模式下 CTRL-H 是干什么的
:h i_CTRL-H         查询插入模式下 CTRL-H 是干什么的
:h i_<Up>           查询插入模式下方向键上是干什么的
:h pattern.txt      正则表达式帮助
:h eval             脚本编写帮助
:h function-list    查看 VimScript 的函数列表 
:h windows.txt      窗口使用帮助
:h tabpage.txt      标签页使用帮助
:h +timers          显示对 +timers 特性的帮助
:h :!               查看如何运行外部命令
:h set-termcap      查看如何设置按键扫描码
:version            显示当前 Vim 的版本号和特性
:h key-notation     use it in defining custom key mappings
:h +feature-list    browse the feature list
:h operator         find the complete operator list
:h :map-operator    how to create your own custom operators
:h omap-info        how to create your own custom motions
:h g | :h z | :h ctrl-w | :h [    namespaced commands
Tabs and Spaces     http://vimcasts.org/e/2
:h function-list
h {event}           To see an overview of all Vim’s events

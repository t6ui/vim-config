---
# PLUGINS
# ==========================================

# Startup
# -------
- repo: Shougo/dein.vim
- repo: rafi/awesome-vim-colorschemes
- repo: rafi/vim-badge
- repo: thinca/vim-localrc
- repo: christoomey/vim-tmux-navigator
- repo: junegunn/vim-peekaboo
- repo: romainl/vim-cool
- repo: sgur/vim-editorconfig
- repo: itchyny/vim-gitbranch
- repo: itchyny/vim-parenmatch
- repo: itchyny/vim-cursorword
  on_path: .*
  hook_add: |
    autocmd MyAutoCmd FileType denite,qf,nerdtree,easygitblame let b:cursorword=0
    autocmd MyAutoCmd WinEnter * if &diff | let b:cursorword=0 | endif
    autocmd MyAutoCmd InsertEnter * let b:cursorword=0
    autocmd MyAutoCmd InsertLeave * let b:cursorword=1

- repo: tpope/vim-unimpaired
- repo: tpope/vim-repeat
- repo: liuchengxu/vim-which-key
- repo: airblade/vim-rooter
  hook_add: |
    let g:rooter_use_lcd = 1
    let g:rooter_patterns = ['.root', '.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/']
  #   let g:rooter_change_directory_for_non_project_files = 'current'

- repo: mhinz/vim-startify
  hook_add: |
    let g:startify_session_dir = '$VARPATH/session'
    let g:startify_enable_special      = 0
    let g:startify_relative_path       = 1
    let g:startify_change_to_dir       = 1  "default 1
    let g:startify_change_to_vcs_root  = 0  "default 0
    let g:startify_update_oldfiles     = 1
    let g:startify_session_autoload    = 1
    let g:startify_session_persistence = 1
    let g:startify_session_sort = 1
    let g:startify_bookmarks = [
      \ { 'c': '~/.dotfiles/vim/vimrc.symlink' },
      \ '~/aosp',
      \ ]
    let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ '/data/repo/neovim/runtime/doc',
      \ '/Users/mhi/local/vim/share/vim/vim74/doc',
      \ ]
    let g:startify_lists = [
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'files',     'header': ['   MRU']            },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
      \ ]
    let g:startify_session_before_save = [
      \ 'echo "Cleaning up before saving.."',
      \ 'silent! BookmarkSave'
      \ ]

# Vim8 only:
- { repo: roxma/nvim-yarp, if: has('nvim')-1 }
- { repo: roxma/vim-hug-neovim-rpc, if: has('nvim')-1, depends: nvim-yarp }

# Lazy Loading
# ==========================================

# ==========================================
# Building and linting
# ------------

- repo: benekastah/neomake
  # if: has('nvim')-0
  on_cmd: [ Neomake, NeomakeFile, NeomakeEnable ]
  hook_source: source $VIMPATH/config/plugins/neomake.vim
  hook_add: |
    let g:lint_types = [
      \  'python', 'ruby', 'vim', 'sh', 'json', 'markdown',
      \  'yaml.ansible', 'yaml', 'html', 'c', 'c++', 'java'
      \ ]
    autocmd MyAutoCmd BufWritePost *
      \  if expand('%:p') !~ $VIMPATH
      \      && index(g:lint_types, &filetype) > -1
      \      && empty(&buftype)
      \|   Neomake
      \| endif

# - repo: w0rp/ale
#   if: 0
#   hook_source: source $VIMPATH/config/plugins/ale.vim
#   hook_add: |
#     let g:ale_linters = {
#       \ 'javascript': ['eslint'],
#       \ 'c': ['gcc', 'cppcheck'],
#       \ 'cpp': ['gcc', 'cppcheck'],
#       \ 'python': ['flake8', 'pylint'],
#       \ 'lua': ['luac'],
#       \ 'go': ['go build', 'gofmt'],
#       \ 'java': ['javac'],
#       \ }

- { repo: Shougo/vimproc.vim, build: make, on_func: vimproc# }

- repo: tpope/vim-dispatch
  if: has('nvim')-1

# - repo: kassio/neoterm
#   hook_add: |
#     let g:neoterm_default_mod = "botright"
#
# - repo: Shougo/deol.nvim
#   hook_add: |
#     let g:deol#prompt_pattern = '% \|%$'


# ==========================================
# Code completion
# ------------

- repo: Shougo/deoplete.nvim
  depends: context_filetype.vim
  on_event: InsertEnter
  hook_source: |
    source $VIMPATH/config/plugins/deoplete.vim
    call deoplete#enable()

- repo: Shougo/neosnippet.vim
  depends: [ neosnippet-snippets, context_filetype.vim ]
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: let g:neosnippet#data_directory = $VARPATH.'/snippets'
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#enable_complete_done = 1
    autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers

- { repo: Shougo/neosnippet-snippets, lazy: 1 }
- { repo: Shougo/context_filetype.vim, lazy: 1 }

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_path: .*
  hook_add: |
    let g:gutentags_project_root = ['.root']
    let g:gutentags_cache_dir = $VARPATH.'/tags'
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 1
    let g:gutentags_plus_switch = 1
    let g:gutentags_ctags_exclude_wildignore = 1
    let g:gutentags_ctags_exclude = [
      \ '*/wp-admin', '*/wp-content', '*/wp-includes',
      \ '*/application/vendor', '*/vendor/ckeditor', '*/media/vendor'
      \ ]
    let g:gutentags_modules = []
    if executable('ctags')
      let g:gutentags_modules += ['ctags']
    endif

    if executable('gtags-cscope') && executable('gtags')
      let g:gutentags_modules += ['gtags_cscope']
    endif
    let g:gutentags_auto_add_gtags_cscope = 0
    let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
    let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
    let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
    if has('win32') || has('win16') || has('win64') || has('win95')
      let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
    endif

- repo: skywind3000/gutentags_plus
- repo: skywind3000/vim-preview

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html, css, jsx, javascript, javascript.jsx ]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_post_source: call echodoc#enable()

- repo: Raimondi/delimitMate
  on_event: InsertEnter
  hook_source: |
    let g:delimitMate_expand_cr = 1
    let g:delimitMate_excluded_ft = 'html'

- { repo: Shougo/neco-vim, on_ft: vim }
- { repo: Shougo/neoinclude.vim, on_source: deoplete.nvim }
- { repo: Shougo/neco-syntax, on_source: deoplete.nvim }

- repo: davidhalter/jedi-vim
  on_ft: python
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
  hook_source: |
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#max_doc_height = 100
    let g:jedi#quickfix_window_height = 10
    let g:jedi#use_splits_not_buffers = 'right'

- repo: deoplete-plugins/deoplete-jedi
  on_ft: python
  on_event: InsertEnter
  hook_source: autocmd MyAutoCmd FileType python setlocal omnifunc=

- repo: wellle/tmux-complete.vim
  on_event: InsertEnter
  hook_add: let g:tmuxcomplete#trigger = ''

- repo: fszymanski/deoplete-emoji
  on_ft: [ markdown, gitcommit ]
  on_event: InsertEnter


# ==========================================
# Commenters
# ------------

- { repo: tyru/caw.vim, on_map: { nx: <Plug> }}

# ==========================================
# Denite
# ------
# - repo: Shougo/denite.nvim
#   on_cmd: Denite
#   trusted: 1
#   hook_source: source $VIMPATH/config/plugins/denite.vim

# - { repo: Shougo/neoyank.vim, on_event: TextYankPost, on_source: denite.nvim }
# - { repo: Shougo/junkfile.vim, on_source: denite.nvim }
# - { repo: chemzqm/unite-location, on_source: denite.nvim }
# - { repo: chemzqm/denite-git, on_source: denite.nvim }
# - { repo: rafi/vim-denite-z, on_source: denite.nvim }
# - { repo: rafi/vim-denite-session, on_source: denite.nvim }

# - repo: nixprime/cpsm
#   build: 'sh -c "PY3=ON ./install.sh"'

# - repo: raghur/fruzzy
#   on_source: denite.nvim
#   hook_source: let g:fruzzy#sortonempty = 0
#   hook_post_update: call fruzzy#install()

# - { repo: rafi/vim-denite-task, on_source: denite.nvim }
# - repo: rafi/vim-denite-mpc
#   if: executable('mpc')
#   on_source: denite.nvim
#   hook_source: call denite#custom#var('mpc', 'default_view', 'date')

- repo: Yggdroot/LeaderF
  hook_source: source $VIMPATH/config/plugins/LeaderF.vim

# ==========================================
# Grep tools
# ------
# - repo: mhinz/vim-grepper
#   on_map: {nxv: <Plug>(GrepperOperator}
#   on_cmd: Grepper
  #  hook_add: |
    # let g:ackprg = 'ag --nogroup --nocolor --column --hidden --ignore tags'
    # let g:ackprg = 'ag --vimgrep' " Which has the same effect but will report
    # every match on the line.
    # let g:grepper = {
    # \ 'tools': ['rg', 'ag', 'grep', 'vimgrep', 'git'],
    # \ 'vimgrep': {
    # \   'grepprg':    "vim -es +'vimgrep /$*/ ** | cw | %p | qa'",
    # \   'grepprgbuf': "vim -es +'vimgrep /$*/ $. | cw | %p | qa'",
    # \   'grepformat': '%f|%l col %c|%m'
    # \ }}
    # on my work computer, ag doesn't suppport --vimgrep parameter.
    # let g:grepper = {
    #       \ 'tools': ['rg', 'ag', 'grep', 'vimgrep', 'git'],
    #       \ 'ag': { 'grepprg':    'ag --nogroup --nocolor --column --hidden
    #       \ --ignore .tags',
    #       \         'grepformat': '%f:%l:%c:%m,%f:%l:%m',
    #       \         'escape':     '\^$.*+?()[]{}|' },
    #       \ 'vimgrep': {
    #       \   'grepprg':    "vim -es +'vimgrep /$*/ ** | cw | %p | qa'",
    #       \   'grepprgbuf': "vim -es +'vimgrep /$*/ $. | cw | %p | qa'",
    #       \   'grepformat': '%f|%l col %c|%m'
    #       \ }}
    # let g:grepper.highlight = 1
    # let g:grepper.rg.grepprg .= ' --smart-case'
    # let g:grepper.rg.grepprg .= ' --hidden'

# - { repo: brooth/far.vim, on_cmd: [ Far, Farp, F ] }
# - { repo: wincent/ferret }
- repo: dyng/ctrlsf.vim
# - { repo: embear/vim-foldsearch, on_cmd: [ Fw, Fs, Fp, FS, Fl, Fc, Fi, Fd Fe ] }

# ==========================================
# Indent
# ------
# Heuristically set buffer indent options
- repo: tpope/vim-sleuth

# Visually display indent levels in code
- repo: nathanaelkane/vim-indent-guides
  on_cmd: [ IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle ]
  hook_post_source: |
    call indent_guides#init_script_vars()
    call indent_guides#highlight_colors()
  hook_add: |
    let g:indent_guides_color_change_percent = 7
    let g:indent_guides_autocmds_enabled = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_guide_size = 1
    let g:indent_guides_indent_levels = 25
    let g:indent_exclude = [ 'help', 'denite', 'codi' ]
    autocmd MyAutoCmd BufEnter *
      \ if ! empty(&l:filetype) && index(g:indent_exclude, &l:filetype) == -1
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif

# ==========================================
# Navigation
# ------
# - repo: tpope/vim-vinegar
- repo: justinmk/vim-dirvish

- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source $VIMPATH/config/plugins/defx.vim

- repo: kristijanhusak/defx-git
  on_source: defx.nvim

- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
  hook_source: |
    let g:defx_icons_column_length = 2
#    let g:defx_icons_mark_icon = '✓'

# - repo: scrooloose/nerdtree
#   on_map: { n: <Plug> }
#   trusted: 1
#   hook_post_source: source $VIMPATH/config/plugins/nerdtree.vim
#
# - { repo: Xuyuanp/nerdtree-git-plugin, on_source: nerdtree }

- { repo: t9md/vim-choosewin, on_map: { n: <Plug> }}
- repo: moll/vim-bbye

- { repo: kana/vim-altr, on_map: { n: <Plug> }}

- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

# *-Improved
- { repo: haya14busa/vim-asterisk, on_map: { nv: <Plug> }}
# Enhanced in-file search for Vim
# - { repo: wincent/loupe }

- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> }, if: $SUDO_USER == '' }
- { repo: haya14busa/vim-edgemotion, on_map: { nv: <Plug> }}

# ==========================================
# Version control
# ------
- { repo: jreybert/vimagit, on_cmd: Magit }
- { repo: lambdalisue/gina.vim, on_cmd: Gina }

- repo: tpope/vim-fugitive
  # on_cmd: [Gcd, Glcd, Gcommit, Gblame, Gstatus, Gdiff, Gbrowse, Gstatus, Gpush]

# Show git changes at Vim gutter and un/stages hunks
- repo: airblade/vim-gitgutter
  on_path: .*
  hook_source: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sh = $SHELL

- { repo: hotwatermorning/auto-git-diff, on_ft: gitrebase }

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70

- { repo: tpope/vim-git, on_ft: [ gitcommit, gitrebase, gitconfig ]}

# ==========================================
# writing
# ------
- { repo: reedes/vim-wordy, on_cmd: [ Wordy, NextWordy, PrevWordy ]}

- repo: beloglazov/vim-online-thesaurus
  on_cmd: [ OnlineThesaurusCurrentWord, Thesaurus ]
  hook_source: let g:online_thesaurus_map_keys = 0

# ==========================================
# Commands
# --------
# Alignment
- repo: godlygeek/tabular
  on_cmd: Tabularize

- { repo: kana/vim-niceblock, on_map: { x: <Plug> }}
- { repo: mbbill/undotree, on_cmd: UndotreeToggle }

- repo: lambdalisue/suda.vim
  on_event: BufRead
  hook_add: let g:suda_smart_edit = 1

- repo: tyru/open-browser.vim
  on_map: { nxv: <Plug>(openbrowser }
  on_cmd: [ OpenBrowser, OpenBrowserSearch, OpenBrowserSmartSearch ]

- repo: tyru/open-browser-unicode.vim
  depends: open-browser.vim
  on_cmd: OpenBrowserUnicode

- repo: tyru/open-browser-github.vim
  depends: open-browser.vim
  on_cmd: [ OpenGithubFile, OpenGithubIssue, OpenGithubProject ]

# Hex editor
- repo: Shougo/vinarise.vim
  on_cmd: Vinarise
  hook_add: let g:vinarise_enable_auto_detect = 1

# The interactive scratchpad for hackers
- { repo: metakirby5/codi.vim, on_cmd: Codi }

- { repo: guns/xterm-color-table.vim, on_cmd: XtermColorTable }
# - { repo: cocopon/colorswatch.vim, on_cmd: ColorSwatchGenerate }

# ==========================================
# Interface
# ---------
- { repo: t9md/vim-quickhl, on_map: { nv: <Plug> }}
# - { repo: rafi/vim-sidemenu, on_map: { nv: <Plug> }}

- repo: MattesGroeger/vim-bookmarks
  on_path: .*
  hook_source: |
    let g:bookmark_auto_save_file = $VARPATH.'/bookmarks'
    let g:bookmark_no_default_key_mappings = 1
    let g:bookmark_disable_ctrlp = 1
    let g:bookmark_location_list = 1

# 用于在侧边符号栏显示 marks （ma-mz 记录的位置）
- repo: kshenoy/vim-signature

# 根据 quickfix 中匹配到的错误信息，高亮对应文件的错误行
- repo: mh21/errormarker.vim

- repo: lambdalisue/vim-improve-diff
  on_event: [ InsertLeave, BufWinLeave ]
  on_cmd: DiffOrig

- repo: junegunn/goyo.vim
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIMPATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  on_cmd: Limelight

- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: |
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1

- repo: vimwiki/vimwiki
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/blog/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]

# ==========================================
# Operators
# ---------
# - { repo: kana/vim-operator-user, lazy: 1 }
- { repo: kana/vim-operator-user, on_func: operator#user#define }

- repo: tpope/vim-abolish

- repo: rhysd/vim-operator-surround
  depends: [ vim-operator-user, vim-textobj-multiblock ]
  on_map: { vnx: <Plug> }

# ==========================================
# Text objects
# ------------
- { repo: kana/vim-textobj-user, on_func: textobj#user#plugin }
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
- { repo: AndrewRadev/sideways.vim, on_map: { ox: <Plug>Sideways }}
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

# 函数文本对象：if/af 支持 c/c++/vim/java
- repo: kana/vim-textobj-function
  on_ft: [ c, c++, java, vim ]
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1

# 提供 python 相关文本对象，if/af 表示函数，ic/ac 表示类
- { repo: bps/vim-textobj-python, on_ft: python }

# indent 文本对象：ii/ai 表示当前缩进，vii 选中当缩进，cii 改写缩进
- repo: kana/vim-textobj-indent
  depends: vim-textobj-user

# 语法文本对象：iy/ay 基于语法的文本对象
- repo: kana/vim-textobj-syntax
  depends: vim-textobj-user

# 参数文本对象：i,/a, 包括参数或者列表元素
- repo: sgur/vim-textobj-parameter
  depends: vim-textobj-user

# 提供 uri/url 的文本对象，iu/au 表示
- repo: jceb/vim-textobj-uri
  depends: vim-textobj-user

# 提供查找匹配的文本对象：i/ a/ i? a?表示, i/等价于a/
- repo: kana/vim-textobj-lastpat
  depends: vim-textobj-user

# 提供行文本对象：il/al表示
- repo: kana/vim-textobj-line
  depends: vim-textobj-user

# Languages
# ---------
- { repo: mustache/vim-mustache-handlebars, on_ft: html }
- { repo: pearofducks/ansible-vim, on_ft: [ yaml.ansible, ansible_hosts ]}

- repo: othree/html5.vim
  on_ft: html
  hook_add: |
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: |
    let g:vim_markdown_folding_level = 6
    let g:vim_markdown_emphasis_multiline = 0
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_edit_url_in = 'vsplit'
    let g:vim_markdown_strikethrough = 1
    let g:vim_markdown_fenced_languages = [
      \ 'c++=cpp',
      \ 'viml=vim',
      \ 'bash=sh',
      \ 'ini=dosini',
      \ 'makefile=make',
      \ 'py=python'
      \ ]

# let g:mkdp_markdown_css='/home/nick/.local/lib/github-markdown-css/github-markdown.css'
- repo: iamcco/markdown-preview.nvim
  on_ft: [ markdown, pandoc.markdown, rmd ]
  build: 'cd app & yarn install'
  hook_add: |
    let g:mkdp_refresh_slow=1

- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_source: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

- repo: mzlogin/vim-markdown-toc
  on_cmd: [ GenTocGFM, GenTocRedcarpet, GenTocGitLab, UpdateToc ]
  hook_source: let g:vmt_auto_update_on_save = 0

- { repo: elzr/vim-json, on_ft: json }

- { repo: vim-python/python-syntax, on_ft: python }
- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }
- { repo: tmhedberg/SimpylFold, on_ft: python }

- { repo: osyo-manga/vim-monster, on_ft: ruby }
- { repo: vim-jp/syntax-vim-ex, on_ft: vim }

- { repo: ekalinin/Dockerfile.vim, on_ft: [ Dockerfile, yaml.docker-compose ]}
- { repo: tmux-plugins/vim-tmux, on_ft: tmux }

- { repo: MTDL9/vim-log-highlighting, on_ft: log }

- repo: octol/vim-cpp-enhanced-highlight
  on_ft: cpp
  hook_add: |
    let g:cpp_class_scope_highlight = 1
    let g:cpp_member_variable_highlight = 1
    let g:cpp_class_decl_highlight = 1
    let g:cpp_experimental_simple_template_highlight = 1
    let g:cpp_concepts_highlight = 1
    let g:cpp_no_function_highlight = 1

#  vim: set ts=2 sw=2 tw=80 et :
